tree emptyTree; /*creado por default como un BST

//tree notEmptyTree(1);
//tree arrayTree([1,3,4]);
*/

configure emptyTree {
    addNode(2);
    addNodes([5,8,9]);

    deleteNode(1);
    deleteNodes([3,4,5]);


    findNode(8);
    findNodes([1,2,3]);/*pisa el ultimo find, y pinta diferenciado solo el 9*/
}

tree newTree;

/*mantiene el estado*/
create emptyTreeFile {
    addTree(emptyTree);
    /*addTrees([emptyTree, otherTree]) para imprimir varios arboles*/
    
    addSavePath("D:PC/Downloads"); /*Lugar */
    
    legend([max, min, count, balanced, height]);
    /*
    showMax();
    showMin();
    showCount();
    isBalanced();
    showHeight()
    */
    /* susceptible a cambios a ver si se muestra más info */
}


/* al entrar a otro configure, reseteo el find*/
configure avl emptyTree {
    addNodes([10,13]);
    findNode(10);
}


//El programa es un conjunto de constantes
//Las constantes son una única constante, o una constante seguida de conjunto de constantes
PROGRAM -> ConstsArray
ConstsArray -> Const | Const ConstsArray

//Las constantes pueden ser declaración de variables tipo tree o bloques create o configure
Const -> Decl | Block

//Palabra reservada tree, un ID, un ;
//ID debe ser de tipo String
Decl -> 'tree'* ID* SEMICOLON* | 'tree'* (Integer) ID* SEMICOLON* | 'tree' ([IntegerArray]) ID* SEMICOLON*

//Un bloque es la palabra reservada configure (tipo de arbol) id del arbol, y sentencias sobre ese árbol
//o
//palabra reservada create ID archivo, sentencias sobre ese archivo
Block -> 'configure' (TreeType) ID* { treeSentences } | 'create' ID* { fileSentences }

//Puede ser vacío (se usa el default), o alguna de las palabras reservadas para el tipo de arbol
TreeType -> lambda* | 'bst'* | 'avl'* | 'rbt'* 

//Funciones para el tipo de arbol
//treeSentences es una única treeSentenceColon ; o una, seguida de más treeSentences
//defino explicitamente todas las funciones de treeSentence
//Pueden recibir Integer o arreglo de Integer
treeSentences -> treeSentenceColon | treeSentenceColon treeSentences
treeSentenceColon -> treeSentence SEMICOLON*
treeSentence -> addNode(INTEGER*) | deleteNode(INTEGER*) | findNode(INTEGER*) | addNodes([IntegerArray]) | deleteNodes([IntegerArray]) | findNode([IntegerArray])
IntegerArray -> INTEGER* | INTEGER* COMMA* IntegerArray

//Funciones para el tipo file
//Repetimos la lógica de treeSentences, pero para las específicas de file 
fileSentences -> fileSentenceColon | fileSentenceColon fileSentences
fileSentenceColon -> fileSentence SEMICOLON*
fileSentence -> addTree(ID*) | addTrees(TreeArray) | addSavePath(String*) | title([TitleConstantArray])
TreeArray -> ID* | ID*, treeArray
TitleConstantArray -> TitleConstant | TitleConstant, TitleConstantArray 

//Si se nos ocurren más constantes para mostrar se agregarían acá
TitleConstant -> max | min | count | balanced | height  
