tree emptyTree; /*creado por default como un BST

//tree notEmptyTree(1);
//tree arrayTree(1,3,4);
*/

configure emptyTree {
    addNode(2);
    addNodes([5,8,9]);

    deleteNode(1);
    deleteNodes([3,4,5]);


    findNode(8);
    findNodes([1,2,3]);/*pisa el ultimo find, y pinta diferenciado solo el 9*/
}

tree newTree;

/*mantiene el estado*/
create emptyTreeFile {
    addTree(emptyTree);
    /*addTrees([emptyTree, otherTree]) para imprimir varios arboles*/
    
    addSavePath("D:PC/Downloads"); /*Lugar */
    
    legend([max, min, count, balanced, height]);
    /*
    showMax();
    showMin();
    showCount();
    isBalanced();
    showHeight()
    */
    /* susceptible a cambios a ver si se muestra mÃ¡s info */
}


/* al entrar a otro configure, reseteo el find*/
configure avl emptyTree {
    addNodes([10,13]);
    findNode(10);
}



PROGRAMA -> CONSTS
CONSTS -> CONST | CONSTS

CONST -> DECL | BLOCK

DECL -> 'tree'* ID* SEMICOLON*

BLOCK -> configure (lambda | avl | bst | rbt ) ID { treeSentences } | create ID { fileSentences }

treeSentences -> treeSentence | treeSentence treeSentences

fileSentences -> fileSentence | fileSentence fileSentences
